-- MySQL Script generated by MySQL Workbench
-- 10/23/15 21:00:45
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema turismo
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema turismo
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `turismo` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `turismo` ;

-- -----------------------------------------------------
-- Table `turismo`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`usuario` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT 'id do usuário (pk)',
  `email` VARCHAR(45) NOT NULL COMMENT 'email do usuário (deve ser único)',
  `senha` VARCHAR(256) NOT NULL COMMENT 'senha do usuário',
  `alias` VARCHAR(20) NOT NULL COMMENT 'alias do usuário (deve ser único)',
  `nome` VARCHAR(50) NOT NULL COMMENT 'nome do usuário',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  UNIQUE INDEX `email_UNIQUE` (`email` ASC)  COMMENT '',
  UNIQUE INDEX `alias_UNIQUE` (`alias` ASC)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`tipo_agenda`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`tipo_agenda` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id do tipo de agenda (pk)',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'descrição do tipo de agenda.',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`agenda`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`agenda` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT 'id da agenda criada pelo usuário (pk)',
  `id_usuario` BIGINT NOT NULL COMMENT 'id do usuário (fk_agenda_usuario)',
  `id_tipo_agenda` INT NOT NULL COMMENT 'id do tipo de agenda (fk_agenda_tipo_agenda)',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'descricao da agenda',
  `data_inicio` DATETIME NOT NULL COMMENT 'data e hora de início prevista para a agenda',
  `data_fim` DATETIME NULL COMMENT 'data e hora de término prevista para a agenda',
  `data_criacao_agenda` DATETIME NOT NULL COMMENT 'data e hora de criação da agenda',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_agenda_tipo_agenda_idx` (`id_tipo_agenda` ASC)  COMMENT '',
  INDEX `fk_agenda_usuario_idx` (`id_usuario` ASC)  COMMENT '',
  CONSTRAINT `fk_agenda_tipo_agenda`
    FOREIGN KEY (`id_tipo_agenda`)
    REFERENCES `turismo`.`tipo_agenda` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_agenda_usuario`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `turismo`.`usuario` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`percurso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`percurso` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT 'id do percurso (pk)',
  `id_agenda` BIGINT NOT NULL COMMENT 'id da agenda (fk_percurso_agenda).\ndeve ser único para a agenda informada (id_agenda_UNIQUE)',
  `data_inicio` DATETIME NOT NULL COMMENT 'data e hora previstas para início do percurso',
  `data_fim` DATETIME NULL COMMENT 'data e hora previstas para o término do percurso',
  `ponto_partida` VARCHAR(50) NOT NULL COMMENT 'ponto de partida (pode conter dado de geolocalização ou informação digitada pelo usuário)',
  `ponto_chegada` VARCHAR(50) NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_agenda_UNIQUE` (`id_agenda` ASC)  COMMENT '',
  CONSTRAINT `pk_percurso_agenda`
    FOREIGN KEY (`id_agenda`)
    REFERENCES `turismo`.`agenda` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`tipo_transporte`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`tipo_transporte` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id do tipo de transporte (pk).\nEx.: carro, avião, a pé, etc.',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'Referente ao tipo de transporte utilizado. Ex.: aéreo, terrestre, etc.',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`transporte`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`transporte` (
  `id` BIGINT NOT NULL COMMENT 'id do transporte (pk)',
  `id_tipo_transporte` INT NOT NULL COMMENT 'id do tipo de transporte descrito (fk_transporte_tipo_transporte).',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'Referente ao meio de transporte utilizado.\nEx.: avião, carro, ônibus, etc ...\n',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_transporte_tipo_transporte_idx` (`id_tipo_transporte` ASC)  COMMENT '',
  CONSTRAINT `fk_transporte_tipo_transporte`
    FOREIGN KEY (`id_tipo_transporte`)
    REFERENCES `turismo`.`tipo_transporte` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`trecho`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`trecho` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT 'id do trecho (pk).\nTrecho é a parte do percurso que contém as informações referentes a cada ponto de interesse informado.',
  `id_percurso` BIGINT NOT NULL COMMENT 'id do percurso relacionado ao trecho (fk_trecho_percurso)',
  `id_transporte` BIGINT NOT NULL COMMENT 'id do transporte utilizado para percorrer o trecho informado (fk_trecho_transporte).',
  `ponto_partida` VARCHAR(50) NOT NULL COMMENT 'Ponto de partida(inicial) do trecho informado. Pode ser por geolocalização ou descrição simples realizada pelo usuário.',
  `ponto_chegada` VARCHAR(50) NOT NULL COMMENT 'Ponto de chegada(final) do trecho informado. Pode ser por geolocalização ou descrição simples realizada pelo usuário.',
  `distancia` INT NOT NULL COMMENT 'Distância percorrida, em metros, entre o ponto de partida e o ponto de chegada para esse trecho.',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_trecho_percurso_idx` (`id_percurso` ASC)  COMMENT '',
  INDEX `fk_trecho_transporte_idx` (`id_transporte` ASC)  COMMENT '',
  CONSTRAINT `fk_trecho_percurso`
    FOREIGN KEY (`id_percurso`)
    REFERENCES `turismo`.`percurso` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trecho_transporte`
    FOREIGN KEY (`id_transporte`)
    REFERENCES `turismo`.`transporte` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`avaliacao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`avaliacao` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id da avaliação do ponto de interesse (pk)',
  `descricao` VARCHAR(20) NOT NULL COMMENT 'descrição da avaliação.\nEx.: bom, ruim, excelente, etc.',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`ponto_interesse`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`ponto_interesse` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT 'id do ponto de interesse (pk)',
  `id_trecho` BIGINT NULL COMMENT 'id do trecho relacionado ao ponto de interesse (fk_ponto_interesse_trecho)',
  `id_avaliacao` INT NULL COMMENT 'id da avaliacao do ponto de interesse (fk_ponto_interesse_avaliacao)',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'descrição do ponto de interesse',
  `localizacao` VARCHAR(60) NOT NULL COMMENT 'Localização do ponto de interesse. Pode ser por geolocalizacao ou inserção manual do usuário.',
  `custo` DECIMAL(9,2) NULL COMMENT 'O custo referente ao ponto de interesse, se houver.',
  `observacao` VARCHAR(50) NULL COMMENT 'observação sobre o ponto de interesse, se houver.',
  `recomendar` TINYINT(1) NULL COMMENT 'O usuário informa se recomenda ou não o ponto de interesse visitado.',
  `data_inicio` DATETIME NOT NULL COMMENT 'data e hora de chegada no ponto de interesse informado.',
  `data_fim` DATETIME NULL COMMENT 'data e hora de saída no ponto de interesse informado.',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_ponto_interesse_trecho_idx` (`id_trecho` ASC)  COMMENT '',
  INDEX `fk_ponto_interesse_avaliacao_idx` (`id_avaliacao` ASC)  COMMENT '',
  CONSTRAINT `fk_ponto_interesse_trecho`
    FOREIGN KEY (`id_trecho`)
    REFERENCES `turismo`.`trecho` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ponto_interesse_avaliacao`
    FOREIGN KEY (`id_avaliacao`)
    REFERENCES `turismo`.`avaliacao` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`tipo_hospedagem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`tipo_hospedagem` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id do tipo de hospedagem (pk)',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'descrição do tipo de hospedagem.\nEx.: Hotel, hostel, model, particular, etc.',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`hospedagem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`hospedagem` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT 'id da hospedagem (pk)',
  `id_ponto_interesse` BIGINT NOT NULL COMMENT 'id do ponto de interesse (fk_hospedagem_ponto_interesse)',
  `id_tipo_hospedagem` INT NOT NULL COMMENT 'id do tipo de hospedagem (fk_hospedagem_tipo_hospedagem)',
  `reservado` TINYINT(1) NOT NULL COMMENT 'flag para identificar se a hospedagem já foi reservada',
  `paga` TINYINT(1) NOT NULL COMMENT 'flag para identificar se a hospedagem já foi paga.',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_hospedagem_ponto_interesse_idx` (`id_ponto_interesse` ASC)  COMMENT '',
  INDEX `fk_hospedagem_tipo_hospedagem_idx` (`id_tipo_hospedagem` ASC)  COMMENT '',
  CONSTRAINT `fk_hospedagem_ponto_interesse`
    FOREIGN KEY (`id_ponto_interesse`)
    REFERENCES `turismo`.`ponto_interesse` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hospedagem_tipo_hospedagem`
    FOREIGN KEY (`id_tipo_hospedagem`)
    REFERENCES `turismo`.`tipo_hospedagem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`local_alimentacao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`local_alimentacao` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id do local de alimentação (pk)',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'descrição do local de alimentação',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`especialidade`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`especialidade` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id da especialidade (pk)',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'descrição da especialidade',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`alimentacao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`alimentacao` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT 'id do ponto de interesse de alimentação (pk)',
  `id_ponto_interesse` BIGINT NOT NULL COMMENT 'id do ponto de interesse (fk_alimentacao_ponto_interesse)',
  `id_local_alimentacao` INT NOT NULL COMMENT 'id do local de alimentação (fk_alimentacao_local_alimentacao)',
  `id_especialidade` INT NULL COMMENT 'id da especialidade (fk_alimentacao_especialidade)',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `pk_alimentacao_ponto_interesse_idx` (`id_ponto_interesse` ASC)  COMMENT '',
  INDEX `fk_alimentacao_local_alimentacao_idx` (`id_local_alimentacao` ASC)  COMMENT '',
  INDEX `fk_alimentacao_especialidade_idx` (`id_especialidade` ASC)  COMMENT '',
  CONSTRAINT `fk_alimentacao_ponto_interesse`
    FOREIGN KEY (`id_ponto_interesse`)
    REFERENCES `turismo`.`ponto_interesse` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_alimentacao_local_alimentacao`
    FOREIGN KEY (`id_local_alimentacao`)
    REFERENCES `turismo`.`local_alimentacao` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_alimentacao_especialidade`
    FOREIGN KEY (`id_especialidade`)
    REFERENCES `turismo`.`especialidade` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`subtipo_passeio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`subtipo_passeio` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id do subtipo de passeio.\nEx.: cinema, museu, teatro, etc.',
  `descricao` VARCHAR(50) NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`tipo_passeio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`tipo_passeio` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id do tipo de passeio (pk)',
  `id_subtipo_passeio` INT NOT NULL COMMENT 'id do subtipo de passeio (fk_tipo_passeio_subtipo_passeio)',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'descrição do tipo de passeio.\nEx.: cultural, lazer, ponto turístico, etc.',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC)  COMMENT '',
  INDEX `fk_tipo_passeio_subtipo_passeio_idx` (`id_subtipo_passeio` ASC)  COMMENT '',
  CONSTRAINT `fk_tipo_passeio_subtipo_passeio`
    FOREIGN KEY (`id_subtipo_passeio`)
    REFERENCES `turismo`.`subtipo_passeio` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`passeio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`passeio` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT 'id do passeio (pk)',
  `id_ponto_interesse` BIGINT NOT NULL COMMENT 'id do ponto de interesse (fk_passeio_ponto_interesse)',
  `id_tipo_passeio` INT NOT NULL COMMENT 'id do tipo de passeio (fk_passeio_tipo_passeio)',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_passeio_tipo_passeio_idx` (`id_tipo_passeio` ASC)  COMMENT '',
  INDEX `fk_passeio_ponto_interesse_idx` (`id_ponto_interesse` ASC)  COMMENT '',
  CONSTRAINT `fk_passeio_tipo_passeio`
    FOREIGN KEY (`id_tipo_passeio`)
    REFERENCES `turismo`.`tipo_passeio` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_passeio_ponto_interesse`
    FOREIGN KEY (`id_ponto_interesse`)
    REFERENCES `turismo`.`ponto_interesse` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`negocios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`negocios` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT 'id do negócio relacionado ao ponto de interesse (pk)',
  `id_ponto_interesse` BIGINT NOT NULL COMMENT 'id do ponto de interesse (fk_negocios_ponto_interesse)',
  `reuniao` TINYINT(1) NULL COMMENT 'Informa se o ponto de interesse de negócio é uma reunião ou não.',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_negocios_ponto_interesse_idx` (`id_ponto_interesse` ASC)  COMMENT '',
  CONSTRAINT `fk_negocios_ponto_interesse`
    FOREIGN KEY (`id_ponto_interesse`)
    REFERENCES `turismo`.`ponto_interesse` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`subtipo_evento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`subtipo_evento` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id do subtipo de evento (pk)',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'Relação dos sub tipos de evento.\nEx.: Congresso, Simpósio, Curso',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`tipo_evento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`tipo_evento` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id do tipo de evento (pk)',
  `id_subtipo_evento` INT NOT NULL COMMENT 'id do subtipo de evento relacionado ao evento (fk_tipo_evento_subtipo_evento)',
  `descricao` VARCHAR(50) NOT NULL COMMENT 'Relação dos tipos de evento.\nEx.: Acadêmico, Show, Outros, etc.',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC)  COMMENT '',
  INDEX `fk_tipo_evento_subtipo_evento_idx` (`id_subtipo_evento` ASC)  COMMENT '',
  CONSTRAINT `fk_tipo_evento_subtipo_evento`
    FOREIGN KEY (`id_subtipo_evento`)
    REFERENCES `turismo`.`subtipo_evento` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`evento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`evento` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id do evento relacionado ao ponto de interesse (pk)',
  `id_ponto_interesse` BIGINT NOT NULL COMMENT 'id do ponto de interesse (fk_evento_ponto_interesse)',
  `id_tipo_evento` INT NOT NULL COMMENT 'id do tipo de evento relacionado ao ponto de interesse (fk_evento_tipo_evento)',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_evento_ponto_interesse_idx` (`id_ponto_interesse` ASC)  COMMENT '',
  INDEX `fk_evento_tipo_evento_idx` (`id_tipo_evento` ASC)  COMMENT '',
  CONSTRAINT `fk_evento_ponto_interesse`
    FOREIGN KEY (`id_ponto_interesse`)
    REFERENCES `turismo`.`ponto_interesse` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_evento_tipo_evento`
    FOREIGN KEY (`id_tipo_evento`)
    REFERENCES `turismo`.`tipo_evento` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `turismo`.`preferencias_usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `turismo`.`preferencias_usuario` (
  `id` BIGINT NOT NULL AUTO_INCREMENT COMMENT 'id da preferência do usuário',
  `id_usuario` BIGINT NOT NULL COMMENT 'id do usuario (fk_preferencias_usuario)',
  `id_ponto_interesse` BIGINT NOT NULL COMMENT 'id do ponto de interesse relacionado a preferência do usuário (fk_preferencia_ponto_interesse)',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_preferencias_usuario_idx` (`id_usuario` ASC)  COMMENT '',
  INDEX `fk_preferencias_ponto_interesse_idx` (`id_ponto_interesse` ASC)  COMMENT '',
  CONSTRAINT `fk_preferencias_usuario`
    FOREIGN KEY (`id_usuario`)
    REFERENCES `turismo`.`usuario` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_preferencias_ponto_interesse`
    FOREIGN KEY (`id_ponto_interesse`)
    REFERENCES `turismo`.`ponto_interesse` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
